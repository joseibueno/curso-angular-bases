{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nlet DbzService = /*#__PURE__*/(() => {\n  class DbzService {\n    constructor() {\n      this.characters = [{\n        id: uuid(),\n        name: 'Kriling',\n        power: 500\n      }, {\n        id: uuid(),\n        name: 'Goku',\n        power: 9500\n      }, {\n        id: uuid(),\n        name: 'Vegeta',\n        power: 7500\n      }];\n    }\n    addCharacter(character) {\n      /**\n       * operador spread [...], toma todas las opropiedades y las establece tal cual excepto las que\n       * cambiemos nosotros. \"Normalmente\" loa campos que vayamos a establecer deberían ir detrás\n       * del operador asi: => { ...character, id: uuid() }\n       */\n      const newCharacter = {\n        id: uuid(),\n        ...character\n      };\n      this.characters.push(newCharacter);\n    }\n    // onDeleteCharacter(index: number):void {\n    //   this.characters.splice(index, 1);\n    // }\n    deleteCharacterById(id) {\n      this.characters = this.characters.filter(character => character.id !== id);\n    }\n  }\n  DbzService.ɵfac = function DbzService_Factory(t) {\n    return new (t || DbzService)();\n  };\n  DbzService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DbzService,\n    factory: DbzService.ɵfac,\n    providedIn: 'root'\n  });\n  return DbzService;\n})();\nexport { DbzService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}